name: Execute Command on EC2 via SSM

on:
  push:
    branches:
    - main
  workflow_dispatch:
    # Allows manual trigger

jobs:
  run-on-ec2:
    runs-on: ubuntu-latest # GitHub-hosted runner

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install AWS CLI (If Not Installed)
      run: |
        sudo apt-get update
        sudo apt-get install -y unzip
        if ! command -v aws &> /dev/null; then
          echo "AWS CLI not found. Installing..."
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -o awscliv2.zip
          sudo ./aws/install
        fi
        aws --version
      shell: bash

    - name: Configure AWS Credentials
      run: |
        mkdir -p ~/.aws
        cp scripts/aws-credentials.txt ~/.aws/credentials
        chmod 600 ~/.aws/credentials
      shell: bash

    - name: Assign IAM Role to Instances
      run: |
        ROLE_NAME="ssmrequiredrole"
        INSTANCE_PROFILE_NAME="AWSApplicationMigrationConversionServerRole"

        # Check if the IAM role exists; create if not
        if ! aws iam get-role --role-name "$ROLE_NAME" &> /dev/null; then
          echo "Creating IAM role: $ROLE_NAME..."
          aws iam create-role --role-name "$ROLE_NAME" \
            --assume-role-policy-document '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"ec2.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
          
          # Attach SSM policy
          aws iam attach-role-policy --role-name "$ROLE_NAME" \
            --policy-arn arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
          
          echo "IAM role $ROLE_NAME created and policy attached."
        fi

        # Check if the instance profile exists; create if not
        if ! aws iam get-instance-profile --instance-profile-name "$INSTANCE_PROFILE_NAME" &> /dev/null; then
          echo "Creating IAM instance profile: $INSTANCE_PROFILE_NAME..."
          aws iam create-instance-profile --instance-profile-name "$INSTANCE_PROFILE_NAME"
          aws iam add-role-to-instance-profile --instance-profile-name "$INSTANCE_PROFILE_NAME" --role-name "$ROLE_NAME"
          echo "IAM instance profile $INSTANCE_PROFILE_NAME created and role added."
        fi

        # Assign IAM role to each instance
        while IFS= read -r server || [[ -n "$server" ]]; do
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=private-ip-address,Values=$server" \
            --query "Reservations[*].Instances[*].InstanceId" --output text)

          if [[ -z "$INSTANCE_ID" ]]; then
            echo "No instance found for IP: $server"
            continue
          fi
          
          CURRENT_PROFILE=$(aws ec2 describe-instances --instance-ids "$INSTANCE_ID" --query "Reservations[*].Instances[*].IamInstanceProfile.Arn" --output text)

          if [[ -z "$CURRENT_PROFILE" ]]; then
            echo "Assigning IAM role to instance: $INSTANCE_ID"
            aws ec2 associate-iam-instance-profile \
              --instance-id "$INSTANCE_ID" \
              --iam-instance-profile Name="$INSTANCE_PROFILE_NAME"
            sleep 10  # Wait for the role to attach properly
          else
            echo "Instance $INSTANCE_ID already has an IAM role."
          fi
        done < scripts/serverlist.txt
      shell: bash

    - name: Install SSM Agent on Instances
      run: |
        while IFS= read -r server || [[ -n "$server" ]]; do
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=private-ip-address,Values=$server" \
            --query "Reservations[*].Instances[*].InstanceId" --output text)

          if [[ -z "$INSTANCE_ID" ]]; then
            echo "No instance found for IP: $server"
            continue
          fi

          echo "Installing SSM Agent on instance: $INSTANCE_ID"

          # Command to install SSM agent based on the OS
          CMD="\
          if [ -f /etc/os-release ]; then . /etc/os-release; OS=\$ID; else OS='unknown'; fi; \
          case \"\$OS\" in \
            amazon) sudo yum install -y amazon-ssm-agent && sudo systemctl enable amazon-ssm-agent && sudo systemctl start amazon-ssm-agent ;; \
            ubuntu) sudo snap install amazon-ssm-agent && sudo systemctl enable snap.amazon-ssm-agent.amazon-ssm-agent && sudo systemctl start snap.amazon-ssm-agent.amazon-ssm-agent ;; \
            redhat|centos) sudo yum install -y amazon-ssm-agent && sudo systemctl enable amazon-ssm-agent && sudo systemctl start amazon-ssm-agent ;; \
            debian) sudo apt-get update && sudo apt-get install -y amazon-ssm-agent && sudo systemctl enable amazon-ssm-agent && sudo systemctl start amazon-ssm-agent ;; \
            suse) sudo zypper install -y amazon-ssm-agent && sudo systemctl enable amazon-ssm-agent && sudo systemctl start amazon-ssm-agent ;; \
            *) echo 'OS not recognized, skipping SSM agent installation.' ;; \
          esac"

          # Send command via SSM
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=instanceIds,Values=$INSTANCE_ID" \
            --parameters '{"commands":["'"$CMD"'"]}' \
            --region us-east-1 \
            --query "Command.CommandId" --output text

          sleep 10  # Allow time for installation
        done < scripts/serverlist.txt
      shell: bash

    - name: Upload command.sh to S3
      run: |
        aws s3 cp scripts/command.sh s3://os-comparison-bucket/command.sh
      shell: bash

    - name: Execute Command on EC2 Instances via SSM
      run: |
        while IFS= read -r server || [[ -n "$server" ]]; do
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=private-ip-address,Values=$server" \
            --query "Reservations[*].Instances[*].InstanceId" --output text)

          if [[ -z "$INSTANCE_ID" ]]; then
            echo "No instance found for IP: $server"
            continue
          fi

          CMD="aws s3 cp s3://os-comparison-bucket/command.sh /tmp/command.sh && chmod +x /tmp/command.sh && sudo bash /tmp/command.sh && aws s3 cp /tmp/system_info.txt s3://os-comparison-bucket/system_info_${server}_${INSTANCE_ID}.txt"

          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=instanceIds,Values=$INSTANCE_ID" \
            --parameters '{"commands":["'"$CMD"'"]}' \
            --region us-east-1 \
            --query "Command.CommandId" --output text
        done < scripts/serverlist.txt
      shell: bash

    - name: Trigger AWS Lambda for Comparison
      run: |
        aws lambda invoke --function-name comparefiles --payload '{}' response.json
      shell: bash
