name: Execute Command on EC2 via SSM

on:
  push:
    branches:
    - main
  workflow_dispatch:
    # Allows manual trigger

jobs:
  run-on-ec2:
    runs-on: ubuntu-latest # GitHub-hosted runner

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install AWS CLI (If Not Installed)
      run: |
        sudo apt-get update
        sudo apt-get install -y unzip
        if ! command -v aws &> /dev/null; then
          echo "AWS CLI not found. Installing..."
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -o awscliv2.zip
          sudo ./aws/install
        fi
        aws --version
      shell: bash

    - name: Install SSM Agent on EC2 Instances
      run: |
        while IFS= read -r server || [[ -n "$server" ]]; do
          echo "Checking if instance has correct IAM role: $server"

          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=private-ip-address,Values=$server" \
            --query "Reservations[*].Instances[*].InstanceId" --output text)

          if [[ -z "$INSTANCE_ID" ]]; then
            echo "No instance found for IP: $server. Skipping..."
            continue
          fi

          IAM_ROLE=$(aws ec2 describe-instances \
            --instance-ids "$INSTANCE_ID" \
            --query "Reservations[0].Instances[0].IamInstanceProfile.Arn" --output text)

          if [[ "$IAM_ROLE" == "None" ]]; then
            echo "No IAM role attached to instance $INSTANCE_ID. Skipping..."
            continue
          fi

          echo "Installing SSM Agent on instance $INSTANCE_ID..."
          CMD="sudo yum install -y amazon-ssm-agent || sudo apt-get install -y amazon-ssm-agent || sudo dnf install -y amazon-ssm-agent || sudo snap install amazon-ssm-agent"
          
          COMMAND_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=instanceIds,Values=$INSTANCE_ID" \
            --parameters '{"commands":["'"$CMD"'"]}' \
            --region us-east-1 \
            --query "Command.CommandId" --output text)

          echo "SSM Agent installation command sent with Command ID: $COMMAND_ID"

        done < scripts/serverlist.txt
      shell: bash

    - name: Configure AWS Credentials
      run: |
        mkdir -p ~/.aws
        cp scripts/aws-credentials.txt ~/.aws/credentials
        chmod 600 ~/.aws/credentials
      shell: bash

    - name: Upload command.sh to S3
      run: |
        echo "Uploading command.sh to S3..."
        aws s3 cp scripts/command.sh s3://os-comparison-bucket/command.sh
      shell: bash

    - name: Execute Command on EC2 Instances via SSM and Upload System Info
      run: |
        set +e

        while IFS= read -r server || [[ -n "$server" ]]; do
          echo "-------------------------------------"
          echo "Processing server with private IP: $server"

          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=private-ip-address,Values=$server" \
            --query "Reservations[*].Instances[*].InstanceId" --output text)

          if [[ -z "$INSTANCE_ID" ]]; then
            echo "No instance found for IP: $server"
            continue
          fi
          echo "Found Instance ID: $INSTANCE_ID for IP: $server"

          # Check if instance has IAM role
          IAM_ROLE=$(aws ec2 describe-instances \
            --instance-ids "$INSTANCE_ID" \
            --query "Reservations[0].Instances[0].IamInstanceProfile.Arn" --output text)

          if [[ "$IAM_ROLE" == "None" ]]; then
            echo "No IAM role attached to instance $INSTANCE_ID. Skipping..."
            continue
          fi

          CMD="aws s3 cp s3://os-comparison-bucket/command.sh /tmp/command.sh && chmod +x /tmp/command.sh && sudo bash /tmp/command.sh && aws s3 cp /tmp/system_info.txt s3://os-comparison-bucket/system_info_${server}_${INSTANCE_ID}.txt"
          echo "Command to run: $CMD"

          FIRST_COMMAND_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=instanceIds,Values=$INSTANCE_ID" \
            --parameters '{"commands":["'"$CMD"'"]}' \
            --region us-east-1 \
            --query "Command.CommandId" --output text)

          if [[ -z "$FIRST_COMMAND_ID" ]]; then
            echo "Failed to send SSM command to instance $INSTANCE_ID"
            continue
          fi

          echo "SSM command sent with Command ID: $FIRST_COMMAND_ID."
          sleep 20  

        done < scripts/serverlist.txt
      shell: bash

    - name: Trigger AWS Lambda for Comparison
      run: |
        echo "Triggering AWS Lambda function for comparison..."
        aws lambda invoke --function-name comparefiles --payload '{}' response.json
      shell: bash
