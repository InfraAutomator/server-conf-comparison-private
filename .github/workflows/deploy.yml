name: Execute Command on EC2 via SSM

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual trigger

jobs:
  run-on-ec2:
    runs-on: ubuntu-latest # GitHub-hosted runner

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install AWS CLI (If Not Installed)
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip
          if ! command -v aws &> /dev/null; then
            echo "AWS CLI not found. Installing..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -o awscliv2.zip
            sudo ./aws/install
          fi
          aws --version
        shell: bash

      - name: Configure AWS Credentials
        run: |
          mkdir -p ~/.aws
          cp scripts/aws-credentials.txt ~/.aws/credentials
          chmod 600 ~/.aws/credentials
        shell: bash

      - name: Upload command.sh to S3
        run: |
          echo "Uploading command.sh to S3..."
          aws s3 cp scripts/command.sh s3://os-comparison-bucket/command.sh
        shell: bash

      - name: Execute Command on EC2 Instances via SSM and Upload Output
        run: |
          # Disable immediate exit to allow the loop to continue even if one iteration fails
          set +e

          # Helper function to get SSM command output
          get_ssm_output() {
            local cmd_id="$1"
            local instance_id="$2"
            aws ssm get-command-invocation \
              --command-id "$cmd_id" \
              --instance-id "$instance_id" \
              --region us-east-1 \
              --query '{Status:Status, StandardOutputContent:StandardOutputContent, StandardErrorContent:StandardErrorContent}' \
              --output json
          }

          while IFS= read -r server || [[ -n "$server" ]]; do
            echo "-------------------------------------"
            echo "Processing server with private IP: $server"

            # Retrieve the Instance ID for this private IP
            INSTANCE_ID=$(aws ec2 describe-instances \
              --filters "Name=private-ip-address,Values=$server" \
              --query "Reservations[*].Instances[*].InstanceId" --output text)
              
            if [[ -z "$INSTANCE_ID" ]]; then
              echo "No instance found for IP: $server"
              continue
            fi
            echo "Found Instance ID: $INSTANCE_ID for IP: $server"
            
            # SSM command: download and execute command.sh from S3 on the instance
            COMMAND_ID=$(aws ssm send-command \
              --document-name "AWS-RunShellScript" \
              --targets "Key=instanceIds,Values=$INSTANCE_ID" \
              --parameters '{"commands":["aws s3 cp s3://os-comparison-bucket/command.sh /tmp/command.sh && chmod +x /tmp/command.sh && sudo bash /tmp/command.sh"]}' \
              --region us-east-1 \
              --query "Command.CommandId" --output text)
              
            if [[ -z "$COMMAND_ID" ]]; then
              echo "Failed to send SSM command to instance $INSTANCE_ID"
              continue
            fi
            
            echo "Command sent with Command ID: $COMMAND_ID. Waiting for execution..."
            sleep 15  # Wait for command execution
            
            echo "Fetching SSM command output for instance $INSTANCE_ID..."
            SSM_OUTPUT=$(get_ssm_output "$COMMAND_ID" "$INSTANCE_ID")
            OUTPUT_FILE="ssm_output_${server}_${INSTANCE_ID}.json"
            echo "$SSM_OUTPUT" > "$OUTPUT_FILE"
            echo "SSM output for instance $INSTANCE_ID saved to $OUTPUT_FILE"
            
            echo "Uploading $OUTPUT_FILE to S3..."
            aws s3 cp "$OUTPUT_FILE" s3://os-comparison-bucket/ || echo "Failed to upload $OUTPUT_FILE"
          done < scripts/serverlist.txt
        shell: bash

      - name: Trigger AWS Lambda for Comparison
        run: |
          echo "Triggering AWS Lambda function for comparison..."
          aws lambda invoke --function-name comparefiles --payload '{}' response.json
        shell: bash
