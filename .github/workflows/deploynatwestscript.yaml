#running script as of 25th March ##
name: Execute Command on EC2 via SSM

on:
  push:
    branches:
    - main
  workflow_dispatch:
    # Allows manual trigger

jobs:
  run-on-ec2:
    runs-on: ubuntu-latest # GitHub-hosted runner

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install AWS CLI (If Not Installed)
      run: |
        sudo apt-get update
        sudo apt-get install -y unzip
        if ! command -v aws &> /dev/null; then
          echo "AWS CLI not found. Installing..."
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -o awscliv2.zip
          sudo ./aws/install
        fi
        aws --version
      shell: bash

    - name: Configure AWS Credentials
      run: |
        mkdir -p ~/.aws
        cp scripts/aws-credentials.txt ~/.aws/credentials
        chmod 600 ~/.aws/credentials
      shell: bash

    - name: Upload command.sh to S3
      run: |
        echo "Uploading command.sh to S3..."
        aws s3 cp scripts/command.sh s3://os-comparison-bucket/command.sh
      shell: bash

    - name: Execute Command on EC2 Instances via SSM and Upload System Info
      run: |
        set +e  # Continue even if one iteration fails

        REGION="ap-south-1"
        BUCKET="os-comparison-bucket"

        while IFS= read -r server || [[ -n "$server" ]]; do
        echo "-------------------------------------"
        echo "Processing server with private IP: $server"

        INSTANCE_ID=$(aws ec2 describe-instances \
        --filters "Name=private-ip-address,Values=$server" \
        --query "Reservations[*].Instances[*].InstanceId" --output text --region $REGION)

        if [[ -z "$INSTANCE_ID" ]]; then
        echo "‚ùå No instance found for IP: $server"
        continue
        fi

        echo "‚úÖ Found Instance ID: $INSTANCE_ID"

        SSM_STATUS=$(aws ssm describe-instance-information \
        --filters "Key=InstanceIds,Values=$INSTANCE_ID" \
        --query "InstanceInformationList[*].InstanceId" --output text --region $REGION)

        if [[ -z "$SSM_STATUS" ]]; then
        echo "‚ö†Ô∏è SSM Agent is not active on $server ($INSTANCE_ID). Skipping..."
        continue
        fi

        echo "‚úÖ SSM Agent is running. Sending command..."


        CMD="
        aws s3 cp s3://$BUCKET/command.sh /tmp/command.sh --region $REGION && chmod +x /tmp/command.sh && sudo bash /tmp/command.sh && if [ -f /tmp/system_info.txt ]; then aws s3 cp /tmp/system_info.txt s3://$BUCKET/system_info_${server}_${INSTANCE_ID}.txt --region $REGION; else echo '‚ö†Ô∏è system_info.txt not found'; fi"

        COMMAND_ID=$(aws ssm send-command \
        --document-name "AWS-RunShellScript" \
        --targets "Key=instanceIds,Values=$INSTANCE_ID" \
        --parameters commands="$CMD" \
        --comment "Run command.sh and upload output" \
        --region $REGION \
        --query "Command.CommandId" --output text)

         if [[ -z "$COMMAND_ID" ]]; then
        echo "‚ùå Failed to send SSM command."
        continue
        fi

        echo "üì® SSM Command sent: $COMMAND_ID"

        echo "‚è≥ Waiting 30 seconds for execution..."
        sleep 30

        aws ssm get-command-invocation \
        --command-id "$COMMAND_ID" \
        --instance-id "$INSTANCE_ID" \
        --region $REGION \
        --query "[Status,StandardOutputContent,StandardErrorContent]" \
        --output text

        done < scripts/serverlist.txt
      shell: bash

    - name: Trigger AWS Lambda for Comparison
      run: |
        echo "Triggering AWS Lambda function for comparison..."
        aws lambda invoke \
        --function-name comparefiles \
        --payload '{}' \
        --region us-east-1 \
        response.json
      shell: bash
